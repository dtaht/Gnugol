#+TITLE:     GNUGOL's Bugs
#+AUTHOR:    Dave TÃ¤ht
#+EMAIL:     d at taht.net
#+DATE:      <2008-08-25 Mo>
#+LANGUAGE:  en
#+TEXT:      All the bugs fit to print
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:nil skip:nil d:t tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://localhost/~d/gnugol/org-info.js
#+LINK_UP: index.html
#+LINK_HOME: index.html
#+STYLE:    <link rel="stylesheet" type="text/css" href="worg.css" />
#+STYLE:    <script type="text/javascript" src="org-info.js"> 
* Gnugol Bugs
** i18n is still ... wonky
   The problems so far:
   1. If the charset doesn't support a glyph defined in UTF-8, no output is generated.  If outputting HTML (or an HTML derivative) the answer is easy:  just output an HTML entity.  What about non-HTML (derived) formats though?
   2. If a query does contain non-US-ASCII characters, the google search fails (duplicated in pre-iconv codebase)
** DONE Command line parameters
   CLOSED: [2010-12-20 Mon 16:38]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2010-12-20 Mon 16:38]
   - State "STARTED"    from "STARTED"    [2010-12-20 Mon 15:28]
   CLOCK: [2010-12-20 Mon 15:28]--[2010-12-20 Mon 16:38] =>  1:10
   :END:
   :PROPERTIES:
   :Effort:   1:00
   :END:
   obsolete --org --wiki --etc in favor of -o wiki
** DONE Abstract out output mode processing from json parsing
   Make it easier to write multiple engines
** DONE NULL Strings can crash gnugol's formatters
   CLOSED: [2010-12-28 Tue 15:38]
   The gnugol engine was very cavalier about empty strings and null inputs as it always gets good data back from the rest of the world. I added a set of fuzz tests to the dummy engine, and was unsurprised to see it go boom. Fixing it took a GOOD long while though.
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2010-12-28 Tue 15:38]
   - State "STARTED"    from "STARTED"    [2010-12-28 Tue 15:36]
   CLOCK: [2010-12-28 Tue 13:04]--[2010-12-28 Tue 15:38] =>  2:34
   - State "STARTED"    from "STARTED"    [2010-12-28 Tue 15:36]
   - State "STARTED"    from "STARTED"    [2010-12-28 Tue 09:11]
   CLOCK: [2010-12-28 Tue 09:11]--[2010-12-28 Tue 12:22] =>  3:11
   :END:
   :PROPERTIES:
   :Effort:   4:00
   :END:
** TODO Formats vary based on NULL/missing inputs
   There are 8 different ways the output can look, when data is missing. 
   As part of fixing the NULL strings problem, I got an org formatter to basically work.
   It should be fairly simple to get the remaining formatters to do the "right thing" 
** TODO Add an editable flag
   add an option to try to encourage gnugol to return a ptr to an editable page
   The example here would be mediawiki/wikipedia. 
** TODO Clean up memory management
*** DONE make buffer more of an object
    CLOSED: [2010-12-21 Tue 10:50]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2010-12-21 Tue 10:50]
    - State "STARTED"    from "STARTED"    [2010-12-21 Tue 08:10]
    CLOCK: [2010-12-21 Tue 08:10]--[2010-12-21 Tue 10:51] =>  2:41
    - State "STARTED"    from "STARTED"    [2010-12-21 Tue 04:52]
    CLOCK: [2010-12-21 Tue 04:52]--[2010-12-21 Tue 05:57] =>  1:05
    :END:
    :PROPERTIES:
    :Effort:   1:00
    :END:
*** Refactor
** TODO Shell mode
*** DONE HTML-Escape to UTF-8 
   Gnugol had  a very limited selection of html escapes to utf-8 support.
   Now it has a full html4 table, thx to Sean.
*** Line/word breaking support
   Coping with [[UTF-8]] is a difficult problem in C. What needs to happen is a fairly complex routine that does line breaking based on the value of the environment variable "COLUMNS" and the nearest UTF-8 charset word.
*** Non-UTF-8 terminals
   Gnugol does not detect when it has a different character set than UTF-8.
(I am not particularly interested in anything other than html<->utf-8 conversion, frankly)
*** Input/Search language support
**** TODO Pick up the default language from the environment
     :LOGBOOK:
     - State "STARTED"    from "STARTED"    [2010-12-30 Thu 12:46]
     CLOCK: [2010-12-30 Thu 12:46]--[2010-12-30 Thu 13:53] =>  1:07
     :END:
     :PROPERTIES:
     :Effort:   1:00
     :END:
     Different engines do this differently. Google needs 2 char codes, bing uses the full utf-8 string, but in an odd format... There must be a standard for this...
** TODO Add support for the footnote mode of markdown/org/textile
** TODO Man page(s) for gnugol
   :LOGBOOK:
   - State "STARTED"    from "STARTED"    [2011-01-02 Sun 18:08]
   CLOCK: [2011-01-02 Sun 18:08]--[2011-01-02 Sun 18:55] =>  0:47
   :END:
   :PROPERTIES:
   :Effort:   2:00
   :END:
** TODO needs a .gnugol/config format
   - use json for this structure
   - need shortcuts, or "abbrevs" for passing along additional search options
     (would like google code search, for example)
** TODO gnugol.el is incomplete
   There are a lot of features from other emacs clients and modes I'd like to borrow. Notably I'd like search-into-pt to be more mode aware than just org-mode. Also want hooks...
*** minor mode for *gnugol* buffer
    N = Next set of results query, P= previous, K to keep current result and discard the rest
*** CNTRL-U
*** Integrate 
*** Context sensitive searching
** DONE Output needs to be sensitive to the level of the current outline
   --levels 0-5
** TODO Does not properly escape "[" characters when in a url or text snippet.
   This one is downright annoying, especially when mailing list results are returned. Substitute another utf-8 char?
** TODO Coherently handle url escaping
   :LOGBOOK:
   - State "STARTED"    from "STARTED"    [2011-01-02 Sun 17:40]
   CLOCK: [2011-01-02 Sun 17:40]--[2011-01-02 Sun 17:42] =>  0:02
   :END:
   :PROPERTIES:
   :Effort:   2:00
   :END:
** TODO Input from a file
   :LOGBOOK:
   - State "STARTED"    from "STARTED"    [2010-12-30 Thu 05:40]
   CLOCK: [2010-12-30 Thu 05:40]--[2010-12-30 Thu 09:32] =>  3:52
   :END:
   :PROPERTIES:
   :Effort:   8:00
   :END:
** Limited search engine support
*** DONE Google's basic engine is essentially complete
*** DONE Dummy engine
*** CNCL Google json interface version 2
    Canceled: This API only searches specific sites
*** DONE Bing
    CLOSED: [2010-12-21 Tue 14:50]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2010-12-21 Tue 12:50]
    - State "STARTED"    from "STARTED"    [2010-12-21 Tue 14:49]
    CLOCK: [2010-12-21 Tue 12:49]--[2010-12-21 Tue 14:50] =>  2:01
    :END:
    :PROPERTIES:
    :Effort:   2:00
    :END:
*** TODO Wikipedia/Mediawiki
    :LOGBOOK:
    - State "STARTED"    from "STARTED"    [2010-12-24 Fri 10:05]
    CLOCK: [2010-12-24 Fri 10:05]--[2010-12-24 Fri 13:09] =>  3:04
    :END:
    :PROPERTIES:
    :Effort:   4:00
    :END:
    In progress. This job is a little tougher as:
**** searching titles is limited to exact case matches. 
**** Disambiguation pages appear to be nonobvious from the json output
**** There are no "snippets" 
**** Full pages tend to be returned
*** TODO Xapian
*** Other engines?
*** TODO Man
*** TODO DNS
*** TODO Opensearch
*** TODO RFCs
*** TODO Citeseer
*** TODO Yacl
** TODO outputs
*** Custom printf-like string
*** Check the difference between mediawiki and org formats
*** Markdown
    Decide on output formatting
*** CSV
*** XML
    Need a standardized XML definition for gnugol's output. There must be one out there.
*** SQL
    SQL output would be nice
   but has much potential for abuse.
*** JSON
    Be able to dump the raw json output
*** TODO SSML 
    SSML is totally untested at present
**** Need a marking scheme for speech enabled search
** SearchMarks
   Unimplemented, prototyping in emacs
** TODO Obsolete gnugold
   There is a ton of broken code from the old networked client lying around that may be useful in the future.
   Right now, however, it's just cluttering up the source tree and making the makefiles more complex. It's going to hurt to axe my own child, but it has to be done.
** TODO make internationalization possible
** TODO work with the latest json API
   The jansson lib has evolved a slightly new API
** Adopt a sane build system
   Cmake? Waf? Autoconf? WTF?
*** MUST cross compile

* Gnugold Bugs
** Complete rewrite in progress
** The old UDP based protocol didn't work out
** It would be nice to prefer text/rss/email/pdf style content for results
   It really bugs me that most web pages are cluttered with crap.
** Misbehaving clients 
** Evil/renegade clients 
A renegade client could respond to local multicast queries with spam - links and offensive stuff unrelated to the query itself. 

This is a violation of the gnugol protocol. I would like to be able to take violent or legal action against those that violate it. 

There are not a lot of good answers to this problem.
*** Rate-limit incoming requests?
*** Report offending clients to a more central authority. 
*** Migrate to a new multicast network address. 
*** Require encryption/authentication on queries and responses.
* Ggl bugs
** Not even started yet!
** Should be as lightweight as possible
   gnugol links against 26!! libraries
* WIP
** Decisions
*** Get the command line options under control
**** have printf-like format options for snippets, ads, etc (obsolete -a -s -t)?
     [[http://sources.redhat.com/bugzilla/attachment.cgi?id=3874&action=view][Glibc has a standard for extending printf]] but does uclibc?

*** Switch to a build system
    - configure is ancient but we do want to cross compile. Configure takes longer than the actual compile!
*** Enable Internationalization
    - autodetect language
    - enable language processing on the command line
*** Decide on a transport protocol
    - sctp: main target
    - udp:  STILL makes sense for small queries, particularly with a trust group
    - tcp:  While well understood I really don't care
*** Security infrastructure
    - gpgme looks like the best option for message level encoding
*** Engine infrastructure
*** Cleanly distribute api across client/transport/server
** IDEAS
*** Interface for blind users
*** Firefox plugin
*** Transclusion
* Gnugol Release Roadmap
  Get to plausible promise!
** Must: 
*** Implement timeouts
*** No cat 1 or 2 bugs
*** Support 4 search engines
*** Compile with -O3
*** Not leak memory
*** Build and test on:
**** x86
**** x86-64
**** Arm 
**** OSX
**** Openwrt
** Should:
*** Lookaside DNS
*** Work on OLPC, fedora, ubuntu
*** Lookaside cache
*** work on non-x86 architectures (nokia n810, blackfin)
*** multicast on local networks
*** Have a stable server/website to use
*** deb package
** Won't:
*** be clean code
*** not core dump occasionally
*** have firefox plugin
*** have windows port 
* Gnugold Release Roadmap 
*** sha1 hashes
*** Compression
